(function(){
    mstrmojo.requiresCls(
    		"mstrmojo.Editor",
    		"mstrmojo.Label", 
    		"mstrmojo._TouchGestures",
    		"mstrmojo.WidgetListMapper"
    		);
    
    function setPosition(w, vl, vt){
    	var st = w.editorNode.style;
    	
    	st.left = vl;
        w.set('left',vl);
        w.left=vl;
        st.top = vt; 
        w.set('top',vt);
        w.top=vt;	
    }

    /**
	 * <p>
	 * Widget that represents a DB Table
	 * </p>
	 * 
	 * @class
	 * @extends mstrmojo.Editor
	 */
    mstrmojo.TablePreview = mstrmojo.declare(
    		// superclass
    		mstrmojo.Box,
    		
    		// mixins
    		[ mstrmojo._TouchGestures ],
    		
    		{
    			/**
				 * @Class name
				 */
    			scriptClass: "mstrmojo.TablePreview",
    			title: '',
    			
    	        left: '',    	        
	   	        top: '',
	   	        width: '',
	   	        height: "650px",
	   	        tbl:"",
	   	        mdl:"",
	   	        n: "Preview",	  	        
	  	  		cssClass: "mstrmojo-Architect-TablePreview",
	  	         	  		
		 		children:[
		 		          	{ 
		 		          	scriptClass: "mstrmojo.Label",
		 		          	cssText: "position:relative; top:0px; left:10px; width: 60%;text-align:left; white-space:nowrap;",
		 		          	text:"MicroStrategy automatically maps Columns in a Table to Attributes & Metrics" //string 	
		 		          	},
		 		          	{ 
		 		          	scriptClass: "mstrmojo.Label",
		 		          	cssText: "position:relative; top:25px; left:10px; width: 60%; text-align:left;white-space:nowrap;",
		 		          	text:"The following grid displays table data"
		 		          	},
		 		          	{ 
		 		          	scriptClass: "mstrmojo.Label",
		 		          	cssText: "position:relative; top:30px; left:10px; width: 60%; text-align:left;white-space:nowrap;",
		 		          	text:"And its corresponding mappings", //string 	
		 		          	id: "titleLabel"	
		 		          	},
		 		          	{
				 		    scriptClass: "mstrmojo.DataGrid",
				 		    id: "lstSmpData",
				 		    cssClass: 'mstrmojo-ACLEditor-ACLList',
				 		    cssText: "position:relative; top:50px; left:10px; background-color:white; border:5px solid #C6C6C6; cursor:pointer;",
				 		    alias:"lstSmpData",
				               itemDisplayField: 20,
				                dropZone: true,
				                items:6,
				 
				 		    columns:[] 	          	         	
			 		        }
		 		         ],
		 		  /**
		 	      * @pre build rendering
		 	      */
 	             preBuildRendering: function preBR(){            
     				this.populateEditor();	
 	             },
 	          /*   onRender: function onRender(){
 	            	if (this.domNode) 
 	            	   this.domNode.style.height=this.height;   
 	             },*/
 	             
 	            postBuildRendering: function onRender(){
  	            	 if (this._super){
 	            	      this._super();
  	            	 }
 	            	 if (this.domNode) 
  	            	   this.domNode.style.height=this.height;   
  	            	
  	             },
 	        	    
 	             
	             /**
				  * @populate the editor
				 */
	             populateEditor: function(){
	            	 this.mdl=mstrmojo.all.ArchModel;
	            	 sData=this.mdl.getTableSampleData(this.mdl.SelTableID);
   	        	 	 grd = mstrmojo.all.lstSmpData;	 		          	
   	        	 	 for (var lCol=1; lCol < sData[0].length; lCol++)
   	        	 	 	{
   	        	 		 	//Control does not like to have a dataField 0
   	        	 		 	grd.columns[lCol-1]={	 		          	         	   
   	        	 	 						dataField:lCol, 
   	        	 	 						headerText: sData[0][lCol], 
   	        	 	 						colCss: 'uidCol'
   	        	 	 						};	

   	        	 	 	}
   	        		//Shift to remove the row 0 that contains the headers
   	        	 	sData.shift();
   	        		grd.items=sData;
   	        	 },

    			/**
				 * @ignore
				 */
                onmouseover: function(evt) {
    				if(!this.isAndroid) {
    					handleTouchBegin(this, evt.e.pageX, evt.e.pageY);
    				}
                },
                
                touchBegin: function touchBegin(touch) {
          			var s = this.editorNode.style;
          			this._tl = parseInt(s.left);
          			this._tt = parseInt(s.top);
    			},
    			
    			touchSwipeMove: function touchSwipeBegin(touch) {
    				setPosition(this, touch.delta.x + this._tl + "px", touch.delta.y + this._tt + "px");
    			},
    			
    			resize: function resize(evt){
    				var h=evt.h, w=evt.w;
      			    var offset = 50;
      			    this.set("height", (h - offset) + 'px');
      			    this.set("width", w + 'px');	
    			},
    			
    			onheightChange: function heightChange(evt){
    				 if (this.domNode){
  		   		       var topSection = 120;
  		        	   this.domNode.style.height=this.height;
  		        	   if (this.lstSmpData.domNode)
  		        	   {
  		        		   this.lstSmpData.domNode.style.height= (parseInt(this.height)- topSection) + 'px';	  	                           
  		        	   }
  			        }    				
    			},
    			
    			onwidthChange: function widthChange(evt){
    				 if (this.domNode){
                		   var minWidth = 460 , w = parseInt(this.width), offset =55;
                		   w= w - offset;
                		   if (w < minWidth ){
                		       w = minWidth;   	      
                		   }
                		   if (this.lstSmpData.domNode)
      		        	   {
      		        		   this.lstSmpData.domNode.style.width = w + 'px';	  	                           
      		        	   }
                	 }    				
    			}
    			
   		}
	    
	    );
})();