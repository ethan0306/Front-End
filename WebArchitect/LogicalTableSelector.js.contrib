(function () {
    mstrmojo.requiresCls(
        "mstrmojo.Button",
        "mstrmojo.HBox",
        "mstrmojo.Box",       
        "mstrmojo.TreeBrowserNode",
        "mstrmojo.TreeBrowser"
     );
    
    var $C = mstrmojo.css;
   
    
    var _tables= [];
    
    /************************Private methods*********************************/

    mstrmojo.LogicalTableSelector = mstrmojo.declare(
        // superclass
        mstrmojo.Box,
        // mixins
        null,
        // instance members
        {
            scriptClass: "LogicalTableSelector",
            
            cssText: "width:100%;overflow:auto;",
            markupMethods: {
                onvisibleChange: function () {
                    this.domNode.style.display = this.visible ? 'block' : 'none';
                }
            },
                                 
            children: [{
            	         scriptClass: "mstrmojo.Box",
            	         cssText:"color:white;background-color:gray;width:100%;height:20px;",
                         children: [{
                        	          scriptClass: "mstrmojo.Label",
                        	          text: "Project Tables",
                        	          cssText:"vertical-align:middle;margin-left:2px;"
                         }],
                       },  
                       
                       {
  		                 scriptClass: "mstrmojo.HBox",
  		                 children: [{
  		                              //Search Box
  		                              alias: 'obSearchBox',
  		                              scriptClass: "mstrmojo.Widget",                  
  		                              cssText: "-webkit-border-radius:10px;-moz-border-radius:10px;border-radius:10px;",
  		                              markupString: '<table id={@id} cellspacing=0 cellpadding=0 class="mstrmojo-SearchBox-Wrapper {@cssClass}" style="{@cssText};">' +
  										               '<tr><td >' +
  										                    '<div class="mstrmojo-SearchBox" mstrAttach:click >' + 
  										                        '<input class="mstrmojo-SearchBox-input" type="text" style="width:{@width};"' + 
  										                            ' mstrAttach:keyup,blur ' +      
  										                        '/>' +
  										                    '</div>' + 
  												       '</td><td>' +
  												       		'<div class="mstrmojo-SearchBox-clear" id="{@id}sbClear" mstrAttach:click></div>' + 
  										               '</td><td>' +
  										                        '<div class="mstrmojo-SearchBox-bg">' +
  										                            '<div class="mstrmojo-SearchBox-search" id="{@id}sbSearch" mstrAttach:click ></div>' +
  										                        '</div>' +
  										                '</td><td>' +
  										                    '<div class="mstrmojo-SearchBox-Refresh" style="width:21px;height:21px;cursor:pointer;position:relative;left: 15px;">' +
  										                           '<div class="mstrmojo-ArchitectListIcon refresh" id="{@id}sbRefresh" mstrAttach:click >' +
  										                           '</div>'+
  										                    '</div>' +  
  										                '</td></tr>'+
  								                     '</table>',
  					                  markupSlots: {
  				                         inputNode: function(){return this.domNode.rows[0].cells[0].firstChild.firstChild;},
  				                         clearNode: function(){return this.domNode.rows[0].cells[1].firstChild;},                      
  				                        // RefreshNode: function(){return this.domNode.rows[0].cells[3].firstChild.firstChild;}
  					                },
  					                
  					                /**
  					                 * <p>Handle click on each SearchBox component</p>
  					                 * 
  					                 * @param {DOMEvent} evt
  					                 * @private
  					                 */
  					                onclick: function(evt) {
  					                    var hWin = evt.hWin,
  					                        e = evt.e || hWin.event,
  					                        tgt = e.target || e.srcElement,
  					                        id = tgt && tgt.id;
  					                    
  					                    switch (id.replace(this.id, '')) {
  					                	                        
  					                    case 'sbSearch': //search icon
  					                        if (this.onEnter && e.keyCode === 13) {
  					                            this.onEnter();
  					                        }
  					                    	                        
  					                        this._onsearch();
  					                        break;                        
  					                        
  					                    case 'sbClear': //clear icon
  					                        this.clearSearch();
  					                        break;
  					                 
  					                    }
  					                    
  					                },
  					               	                
  					                clearSearch: function(){
  					                    this.inputNode.value = '';
  					                    //hide icon
  					                    $C.removeClass(this.clearNode, ['show']);                   
  					                    
  					                    this._onsearch(true);
  					                  
  					                },
  					                
  					                
  					                /**
  					                 * <p>Handle keyup events</P> 
  					                 * 
  					                 * @param {DOMEvent} evt
  					                 * @private
  					                 */
  					                onkeyup: function onkeyup(evt) {
  					                    var hWin = evt.hWin,
  					                        e = evt.e || hWin.event;
  					                    
  					                    // process Enter key
  					                    if (this.onEnter && e.keyCode === 13) {
  					                        this.onEnter();
  					                    }
  					                    
  					                    //get user input by trimming off leading/trailing spaces
  					                    var input = mstrmojo.string.trim(this.inputNode.value);
  					                    
  					                    //show 'clear' icon
  					                    if (this.clearNode) {
  					                    	$C.toggleClass(this.clearNode, ['show'], input.length > 0);
  					                    }	                   
  					              
  					                    
  					                    //start suggesting or clear the search
  					                    if(input.length == 0){
  					                        this._onsearch();
  					                    }
  					                },
  					                
  					                onEnter: function() {
  					                    this._onsearch();
  					                },
  					                
  					                _onsearch:function(toRoot){
	  					               	var mdl=mstrmojo.all.ArchModel;
	  				                	var _tables=[];
	  			                        var tbls=mdl.getSelectedDBRoleTables();
	  			                        for (lcount=0; lcount< tbls.length; lcount++)
	  			                        {
	  			                        	_tables[lcount]={
	  			                            		  n:tbls[lcount].TblName , 
	  			                                      id:tbls[lcount].TblID, 
	  			                                      st: 8405,
	  			                                      items: []};
	  			                        };	
	  			                        mstrmojo.all.existingtablelist.set("items", []);
	  				                	var input = mstrmojo.string.trim(this.inputNode.value).toUpperCase();  //case insensitive
	  				                	if (input.length >0 ){
	  					                	var filtered = [];
	  					                	var index=0;
	  					                	for (item in _tables)
	  					                	{
	  					                		if (_tables[item].n.toUpperCase().indexOf(input)>-1)
	  					                		{
	  					                			filtered[index++] = _tables[item] ;
	  					                		}
	  					                	}
	  				                	}else
	  				                	{
	  				                		filtered=_tables;
	  				                	}
  					                	mstrmojo.all.existingtablelist.set("items", filtered);
  					                },
  					                
  				                    cssClass: "mstrmojo-charcoalbox mstrmojo-dxsprite",
  				                    cssText: "margin: 5px 0; ",
  				                            
  				                    enableMatchCase: false
  					                  
  					                }],               
  					        },
              
		              
				            //Table section
				            {
					                alias: "ProjTableTree",
					                			                
					                scriptClass: "mstrmojo.TreeBrowser",
		
					                cssText: "height:100%;width:100%;overflow:auto",
					                
					                id: "existingtablelist",
					                
					                items: _tables ,
					                
					                height: '700px',
					                
					                draggable: true,
					                
					                multiSelect: true,
					                
					                itemDisplayField: 'n',
					                
					                noCheckBox: true,
					                
					                itemIdField: 'did',
					                
					                listSelector: mstrmojo.ListSelector,
		
					                branchClickPolicy: mstrmojo.TreeBrowserEnum.BRANCH_POLICY_SELECT,
					                
					                getContentThroughTaskCall: function getContentThroughTaskCall(params, callbacks){
					                    //get column content
					                    var m = mstrmojo.all.ArchModel;
						            	if(params.isRoot){
						            		  callbacks.success(_tables);
						                 } else {
						                	 if (params.data){
						                           m.getAttributesFactsInTable(params.data.id, callbacks);
						                	 }
						                 }    			            	
					            	
					                }, 
					            			                
					                isBranch: function isBranch(data){
					                    return data.items;
					                },
					                
					                item2textCss: function item2textCss(data){	
					                	//if (data.did== "-2") { return  ;}  // 
					                	if (data.items){
					                	   return "mstrmojo-ArchitectListIcon t15";  
					                	}
					                	else{
					                	   if (data.t){
					                		   return "mstrmojo-ArchitectListIcon t" + data.t;     
					                	   }
					                	}
					                		
					                },
					                
					                onheightChange: function changeheight(evt){
					                	 if (this.domNode){ 
						  	            	   this.domNode.style.height=this.height;
						 	          	 }
					                	
					                },
					                
					                onRender: function onR(){
					                	 if (this.domNode){ 
						  	            	   this.domNode.style.height=this.height;
						 	            	 }
					                	
					                },
					                
					                tableChange:function tableChange(evt){
					                	var tables=[];
				                        var tbls=mstrmojo.all.ArchModel.tbls;
				                        for (lcount=0; lcount< tbls.length; lcount++)
				                        {
				                              tables[lcount]={
				                            		  n:tbls[lcount].TblName , 
				                                      id:tbls[lcount].TblID, 
				                                      st: 8405,
				                                      t:15,
				                                      items: []};
				                        }
				                        this.set("items",tables);
				                      }
							       
							
				            }
			           	],
			           	
			   resize: function resize(evt){
		           	   var min_height=300, topsectionheight=80; 	
		           	   var h=evt.h, w=evt.w;
		           	   h= h - topsectionheight;          	   
		           	   if  (h < min_height){
		           		 h = min_height;
		           	   }
		                     	  
		           	   this.ProjTableTree.set("height", h+'px');
		           	   if (this.domNode){
		           		   this.domNode.style.height= (evt.h -5) +'px';
		           	   }
	            }

        });

})();