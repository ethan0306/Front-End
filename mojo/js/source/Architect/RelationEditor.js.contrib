(function() {

    mstrmojo.requiresCls("mstrmojo.Vis","mstrmojo.color");

   
    
      /**
     * Handles the touch begin event.
     * @private
     */
    function handleTouchBegin(widget, touchX, touchY) {
        widget.tooltipOn = true;
        if (!browserSupportsHtml5) {
        	return;
        }
        
        handleTouchMove(widget, touchX, touchY);
    }
    
    /**
     * Handles the touch move event. The method positions the tooltip and calls highlightPoint()
     * @private
     */
    function handleTouchMove(widget, touchX, touchY) {
       
    }
    /**
     * A Vis Map widget
     * 
     * @class
     * @extends mstrmojo.Widget
     */
    mstrmojo.RelationEditor = mstrmojo.declare(
		// superclass
		mstrmojo.Box,
		
		// mixins
		null,
        
        /**
         * @lends mstrmojo.DBTableLinker.prototype
         */
        {
            /**
             * @ignore
             */
            scriptClass: 'mstrmojo.RelationEditor',
            
            /**
             * The list of items to display.
             * 
             * @type Array
             */
            model: null,
            
            /**
             * The width of the Map Widget
             * @type Integer
             */
            width: 700,
            
            /**
             * The height of the Map Widget
             * @type Integer
             */
            height: 500,
            blocks:[],
            modal:false,
   	        n: "System Dimension",
  	        cssText : "width:730px;height:795px;overflow:true;border:solid 1px gray; border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px; background-color:#f8f8f8;cursor:pointer;",
            children:[
                      {
                        scriptClass: "mstrmojo.Box",
	 		          	cssText: "position:relative;overflow:false;top:0px;border: solid 3px gray; height:160px;width:790px;background-color:#ffffff;",
	 		          	children:[

	                      {
		 		          	scriptClass: "mstrmojo.HBox",
		 		          	cssText: "position:relative;overflow:true;top:0px; height:160px;background-color:#ffffff;",
		 		          	id:"topBox",
		 		          	children:[],
		 		          	postCreate:function pstBuild(){
	 	        				var topBox=mstrmojo.all.topBox;
		        				this.model=mstrmojo.all.ArchModel;
		        				var tbls=this.model.SelTables;
		        				for (ltblCount=0; ltblCount<tbls.length;ltblCount++)
		        				{
		        					var lleft=300*ltblCount;
		        					var tbl=tbls[ltblCount];
		        					var DBTable=new mstrmojo.DBTable({
		        						scriptClass:"mstrmojo.DBTable",
		        						cssText: "position:relative;width:200px;margin:10px;",
		        						title:tbl.TblName,
		        						visible:true
		        					});
		        					topBox.children[ltblCount]=DBTable;
		        					DBTable.cellCssClass="width:150px;";
		        					var Atts=tbl.AttrInfos;
		        					for (var lAttCount=0; lAttCount<Atts.length; lAttCount++)
		        					{
		        						var Att=this.model.getAttribute(Atts[lAttCount].AttID);
		        						DBTable.addRow(Att.AttName,0,"12",Att.AttID);
		        					}
		        					var Fcts=tbl.FctInfos;
		        					for (var lFctCount=0; lFctCount<Fcts.length; lFctCount++)
		        					{
		        						var Fct=this.model.getFact(Fcts[lFctCount].FctID);
		        						DBTable.addRow(Fct.FctName,0,"13",Fct.FctID);
		        					}
	
		                      	}
	                      }
	                      },	  
	                      {
	  	 		          	scriptClass: "mstrmojo.Box",
	  	 		          	cssClass: "mstrmojo-Architect-ColumnMapping-Layout",  
	  	 		          	cssText: "position:relative;overflow:true;top:0px;left:0px;border:solid 3px gray;height:646px;width:788px;background-color:#ffffff;",
	  	 		            id:"BottomBox",
	  	 		          	dropZone: true,
	  	 		            draggable: true,
	  	 		          	children:[],
	  	 		            ondrop: function(evt){
	                    	  debugger;	
	                    	  alert ("Drop");
	  		          		},
	  		          	    onDragMove: function(evt){
		                    	  debugger;	
		                    	  alert ("Drop");
		  		          		},
		  		          	ondragover: function(evt){
		  		          		 debugger;	
		                    	  alert ("Drop");
		  		          		},
		  		          	ondragend: function(evt){
			  		          		 debugger;	
			                    	  alert ("Drop");
			  		          		},
		  		          	ondragenter: function(evt){
				  		          		 debugger;	
				                    	  alert ("Drop");
				  		          		},
				  		    postCreate:function psBuild(){
		  		          		var bb=mstrmojo.all.BottomBox;
		  		          		var attrs=mstrmojo.all.ArchModel.attrs;
		  		          		var le=5;
		  		          		var tp=0;
		  		          		var j=0;
				  		        for(var i=0;i<attrs.length;i++){
		  		          	    j=i;
				  		        if (i>3){
				  		        	le=230;
				  		        	j=j-4;
				  		        }
				  		        tp=(j *45);	

				  		        var j=new mstrmojo.MovableBlock({
		  		          	          text:attrs[i].AttName,
		  		          	          //cssClass:'movableLabel',
		  		          	          cssText:'position:absolute;border:solid 3px gray;height:30px;text-align:center; width:200px;vertical-align:text-bottom; margin-top:10px;left:' +le  +'px;top:'+ tp  + 'px;'
		  		           	      		});
		  		          	      bb.addChildren(j);
		  		          		}      			
				  		    }      				
	  		          	},
	          
	
	                      
	                      ]
                      }
				],
 			/**
			 * Returns the selected value (null if nothing is selected)
			 * @param x the x position of the click event
			 * @param y the y position of the click event
			 * @return the selected value (null if nothing is selected)
			 */
			getTouchValue: function gtvlindx(x,y) {
				//find clicked area
				if(!this.model) return null;
				
				for (var elem in this.model.coords) {
					var coordsArray = this.model.coords[elem],
						l = coordsArray.length;
					for(var i = 0; i < l; i++ ) {
						if (this.inPoly(coordsArray[i], x, y)) {
							return elem;
						}
					}
            	}
				return null;
		    },
		    		    			
			renderTooltip: function rndrttp(touchVal, touchX, touchY, hdrIndex) {
        		//Set the tooltip text
        		// Build the points display text 
				var gts = this.model.gts;
				if (hdrIndex >=0) {
					var html = gts.row[0].n + ': ' + touchVal;
					var i;
					for (i = 0; gts && gts.col && i < gts.col[0].es.length; i++) {
						var mv = this.model.gvs.items[hdrIndex].items[i]; 
						var v = mv.v;
						if (mv.ty == 4) { // image threshold
							v = '<img src="' + v + '" >';
						}
						html += '<br>' + gts.col[0].es[i].n + ': ' + v;						
					}					 
					this.tooltip.innerHTML = html;
				}

            	//Set the tooltip position
				if (touchX + this.tooltip.offsetWidth > this.width) { // exceeds the width
					touchX = touchX - this.tooltip.offsetWidth;
				}
				
            	this.tooltip.style.webkitTransform = 'translate3d(' + touchX + 'px, ' + touchY + 'px, 0)';
            	this.tooltip.style.MozTransform = 'translate(' + touchX + 'px, ' + touchY + 'px)';

        		//Fade the tooltip in
        		if (this.tooltip.className.indexOf("fadeIn") < 0) {
        			this.tooltip.className = this.tooltip.className + " fadeIn";
        		} 
			},

            /**
             * @ignore
             */
            onmouseover: function(evt) {
                handleTouchBegin(this, evt.e.pageX, evt.e.pageY);
            },
            
            /**
             * @ignore
             */
			onmousemove: function(evt) {
            	handleTouchBegin(this, evt.e.pageX, evt.e.pageY);
      		}
        }
    );
        
})();