(function(){
    mstrmojo.requiresCls(
    		"mstrmojo.Editor",
    		"mstrmojo.Label", 
    		"mstrmojo._TouchGestures",
    		"mstrmojo.WidgetListMapper"
    		);
    
    function setPosition(w, vl, vt){
    	var st = w.domNode.style;
    	
    	st.left = vl;
        w.set('left',vl);
        w.left=vl;
        st.top = vt; 
        w.set('top',vt);
        w.top=vt;	
    }
    
    var _formats=[{n: "Text", id: "Text"},
                  {n: "Number", id: "Number"},
                  {n: "Date", id: "Date"},
                  {n: "Time", id: "Time"},
                  {n: "DateTime", id: "DateTime"},
                  {n: "URL", id: "URL"},
                  {n: "Email", id: "Email"},
                  {n: "HTML Tag", id: "HTML Tag"},
                  {n: "Symbol", id: "Symbol"},
                  {n: "Big Decimal", id: "Big Decimal"},
                  {n: "Phone Number", id: "Phone Number"}];
    var _sellbl=null;
    var _selData=null;
    
    
    var attributegrid=	{ 
	          	scriptClass: "mstrmojo.DataGrid",
		          	id: "lstAtt",
		          	cssClass: 'mstrmojo-ACLEditor-ACLList mstrmojo-Architect-ColumnMapping-Headline',            
		          	cssText: "width:100%; background-color:white; border:5px solid #C6C6C6; height:370px;cursor:pointer;",
		          	alias:"attLst",
                itemDisplayField: 20,
                dropZone: true,
                items:6,
                ondrop: function(evt){
		          		var ele=evt.src.data;
		          		if (ele.TP=="FCT")
		          		{
		          		ele.TP="ATT";
		          		mstrmojo.DataGrid.prototype.ondrop.call(this , evt);
		          		var src=mstrmojo.all.lstFct;
		          		src.remove([src.selectedIndex]);
		          		}
		          	},
		          	columns:[
		          	         	{
		          	         		dataWidget:{                
		          	         			scriptClass: "mstrmojo.CheckBox",
		          	         			postCreate:function()
		          	         					{
        										this.set('checked', this.data.CH);
		          	         					},
		          	         		onclick:function(){
		          	         					this.data.CH =this.checked;
		          	         					this.data.dirty=true;
		          	         					}
 		          	         	          },
 		          	         	   headerText: '',
 		          	         	   colCss: 'rgtCol',
 		          	         	   colWidth: '30'	   
		          	         	},
		          	         	{
		          	         	   dataField:'CN', 
		          	         	   headerText: 'Column Name', 
		          	         	   colCss: 'uidCol',
		          	         	   colWidth: '100'
		          	         	},
		          	         	{
		          	         		dataWidget:{
		          	         		scriptClass:"mstrmojo.InlineEditBox",
		          	         		cssText:'height:15px;',
		          	         		postCreate:function()
		          	         			{
		          	         			this.set('text',this.data.AL);
		          	         			},
		          	         		ontextChange:function()
		          	         			{
		          	         			if (this.data.AL!=this.text)
		          	         				{
		          	         				this.data.dirty=true;
		          	         				}
		          	         			this.data.AL=this.text;
		          	         			}
		          	         		},
		          	         		headerText: 'Alias', 
		          	         		colCss: 'uidCol',
		          	         		colWidth: '100'
		          	         	},
		          	         	{
 		          	        	dataWidget:{ 
 		          	        	 	scriptClass: "mstrmojo.Label",
 		          	        	 	postCreate:function()
 		          	        	 		{
 		          	        	 		this.set('text', this.data.DT);
 		          	        	 		},
 		          	         		onclick:function()
 		          	         			{
 		          	        	 		var me = this,
 		          	        	 		cbo = this._combo;
 		          	        	 		if(!cbo){
	 		          	        	 		var p = document.createElement('div');
	 		          	        	 		this.domNode.parentNode.appendChild(p);
	 		          	        	 		cbo = mstrmojo.insert(		 		          	
							 		          	{
							 		          		scriptClass: "mstrmojo.Pulldown",
								          	        cssText:'cursor:pointer;width: 80px;height:15px;',
								          	        itemIdField: 'id',
								          	        items:_formats,
								          	        visible:false,
								          	        popupToBody: true,
								          	        placeholder: p,
								          	        value:me.text,
								          	        onvalueChange : function(evt){
								 	                    me.set('text',this.value);
								 	                    this.domNode.style.display='none';
								 	                    me.domNode.style.display = 'block';
								 	                    me.data.DT=me.text;
								 		          		}
								 		          	}
							 		          	);
	 		          	        	 		this._combo = cbo;
	 		          	        	 	}
 		          	        	 	    this.domNode.style.display='none';
 		          	        	 		this._combo.render();
 		          	        	 		this.data.DT=this.text;
 		          	        	 		this.data.dirty=true;
 		          	         			}	
 		          	         		},
 		          	         	headerText: 'Data Type',
 		          	         	colCss: 'uidCol' 
	 		          	     }
		          	         	
		          	         ]
	  	};
    
     var factgrid= { 
	             	scriptClass: "mstrmojo.DataGrid",
		          	id: "lstFct",	
		          	alias: "factgrid",
		          	cssText: "width:100%;height:30px; background-color:white; border:5px solid #C6C6C6; cursor:pointer;",
		          	cssClass: 'mstrmojo-ACLEditor-ACLList mstrmojo-Architect-ColumnMapping-Headline',            
	                alias:"fctLst",
	                itemDisplayField: 20,
	                dropZone: true,
	                items: 40,
			          	ondrop: function(evt){
			          		var ele=evt.src.data;
			          		if (ele.TP=="ATT")
			          		{
			          		ele.TP="FCT";
			          		mstrmojo.DataGrid.prototype.ondrop.call(this , evt);
			          		var src=mstrmojo.all.lstAtt;
			          		src.remove([src.selectedIndex]);
			          		}
			          	},
		          	columns:[
		          	         	{
 		          	           dataWidget:{                
		          	         			scriptClass: "mstrmojo.CheckBox",
		          	         			postCreate:function()
		          	         					{
       	         							this.set('checked', this.data.CH);
       	         							},
		 		          	         	onclick:function(){
       			          	         			if (this.data.AL!=this.text)
       			          	         				{
       			          	         				this.data.dirty=true;
       			          	         				}
       			          	         			this.data.AL=this.text;
	 		          	         				}
 		          	         	          },
 		          	           headerText: '',
 		          	           colCss: 'rgtCol',
 		          	           colWidth: '30' 	   
 		          	        },
		          	         	{
		          	         	   dataField:'CN', 
		          	         	   headerText: 'Column Name', 
		          	         	   colCss: 'uidCol',
		          	         	   colWidth: '100'	   
		          	         	},
		          	         	{
		          	         		dataWidget:{
		          	         		scriptClass:"mstrmojo.InlineEditBox",
		          	         		cssText:'height:15px;',
		          	         		postCreate:function(){
		          	         			this.set('text',this.data.AL);
		          	         		},
		          	         		ontextChange:function(){
		          	         			this.data.AL=this.text;
		          	         			this.data.dirty=true;
		          	         		}
		          	         	},
		          	           headerText: 'Alias', 
 		          	           colCss: 'uidCol'	,
 		          	           colWidth: '100'
 		          	         },
 		          	         {
 		          	        	dataWidget:{ 
 		          	        	 	scriptClass: "mstrmojo.Label",
 		          	        	 	postCreate:function()
 		          	        	 		{
	 		          	        	 		this.set('text', this.data.DT);
 		          	        	 		},
 		          	         		onMouseMove:function()
 		          	         		{
 		          	        	 		debugger;
 		          	        	 		cbo = this._combo;
 		          	        	 		if(cbo){	
 		          	        	 			cbo.visible=false;
 		          	        	 		}
 		          	         		},
 		          	        	 	onclick:function()
 		          	         			{
 		          	        	 		var me = this,
 		          	        	 		cbo = this._combo;
 		          	        	 		if(!cbo){
 		          	        	 			var p = document.createElement('div');
	 		          	        	 		this.domNode.parentNode.appendChild(p);
	 		          	        	 		cbo = mstrmojo.insert(		 		          	
							 		          	{
							 		          		scriptClass: "mstrmojo.Pulldown",
								          	        cssText:'cursor:pointer;width: 80px;height:15px;',
								          	        itemIdField: 'id',
								          	        items:_formats,
								          	        visible:false,
								          	        popupToBody: true,
								          	        placeholder: p,
								          	        value:me.text,
								          	        onvalueChange : function(evt){
							 		          			me.set('text',this.value);
								 	                    this.domNode.style.display='none';
								 	                    me.domNode.style.display = 'block';
								 	                    me.data.DT=me.text;
								 		          		}
								 		          	}
							 		          	);
	 		          	        	 		this._combo = cbo;
	 		          	        	 	}
 		          	        	 	    this.domNode.style.display='none';
 		          	        	 		this._combo.render();
 		          	        	 		this.data.DT=this.text;
 		          	        	 		this.data.dirty=true;
 		          	         			}	
 		          	         		},
 		          	         	headerText: 'Data Type',
 		          	         	colCss: 'uidCol' 
			 		         }
		        	         ]
	     	};
    
    /**
	 * <p>
	 * Widget that represents a DB Table
	 * </p>
	 * 
	 * @class
	 * @extends mstrmojo.Editor
	 */
    mstrmojo.Architect.TableEditor = mstrmojo.declare(
    		// superclass
    		mstrmojo.Box,
    		
    		// mixins
    		[ mstrmojo._TouchGestures ],
    		
    		{
    			/**
				 * @Class name
				 */
    			scriptClass: "mstrmojo.Architect.TableEditor",
    			title: '',
    			
    	        left: '',    	        
	   	        top: '',
	   	        width: "500px",
	   	        height: "750px",
	   	        tbl:"",
	   	        mdl:"",
	   	        n: "Column Mapping",
	   	       //cssText : "width:830px;height:560px;padding-top:20px;overflow:true;border:solid 1px gray; border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px; background-color:#f8f8f8",
	   	        cssText : "overflow:auto;width:{@width};height:{@height};padding-top:20px;overflow:true;border:solid 1px gray; border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px; background-color:#f8f8f8",   				   
		 		   				   
		 		children:[
		 		        	{ 
		 		          	scriptClass: "mstrmojo.Label",
		 		          	cssText: "position:relative;left:100px;width:40%;white-space:nowrap;display:inline;",
		 		          	text:"MicroStrategy automatically maps Columns in a Table to Attributes & Metrics" //string 	
		 		          	},
		 		         	{ 
		 		          	scriptClass: "mstrmojo.Label",
		 		          	cssText: "margin-top:30px;position:relative;width:40%; left:10px; text-align:left;white-space:nowrap;display:inline;",
		 		          	text:"Change an Attirbute into a Metric and vice versa using the arrows"
		 		          	},
		 		          	{ 
		 		          	scriptClass: "mstrmojo.Label",
		 		          	cssText: "position:relative; left:10px; width:40%;text-align:left;white-space:nowrap;display:inline;",
		 		          	text:"Uncheck any Column that should not be part of the schema" //string 	
		 		          	},
		 		          	{
		 		          	scriptClass: "mstrmojo.HBox",
		 		          	cssClass: "mstrmojo-Architect-ColumnMapping-Layout",  
		 		          	cssText: "position:relative;margin-top:25px;cellpadding:10px;",
		 		          	alias: "Mappings",
		 		          	children:[
		 		          	           {
						 		          	scriptClass: "mstrmojo.VBox",     //VboxLeft
						 		          	cssText: "position:relative;width:300px;", 
						 		          	children:[{   
								 		          	  	scriptClass: "mstrmojo.HBox",
									 		          	cssClass: "mstrmojo-Architect-ColumnMapping-Headline",             
									 		         	cssText: "position:relative;margin-top:25px;",
									 		         	children:[
									 		         	            { 
																	scriptClass : "mstrmojo.Button",
																	iconClass:"mstrmojo-ArchitectListIcon32 t12"
																   	},
																   	{ 
																   	scriptClass: "mstrmojo.Label",
																   	text: "position:absolute;left: 32px;",									  
																   	text:"Attributes" //string
																   	}     
									 		            ]         
						 		          	 		},
						 		          	 		attributegrid
						 		          	]          
		 		          	           },
		 		          	           {
						 		          	scriptClass: "mstrmojo.VBox",     //VboxInMiddle
						 		          	cssText: "position:relative;top:200px;left:20px;", 
						 		          	children:[
									 		          	        	{ 
												 		          	scriptClass: "mstrmojo.Button",
												 		          	id: "btnAddAtt",
												 		          	cssText: "height:20px; text-align:center;vertical-align:center;",
												 		          	iconClass: "mstrmojo-ArchitectListIcon32 rightarrow",
												 		          
												 		          	onclick: function()
												 		          		{
												 		          		var src=mstrmojo.all.lstFct;
											 		          			var dst=mstrmojo.all.lstAtt;
											 		          			var ele =src.items[src.selectedIndex];
												 		          		if (ele)
												 		          			{
												 		          			dst.add([ele]);
												 		          			src.remove([src.selectedIndex]);
												 		          			}
												 		          		}
												 		          	},
												 		          	{ 
												 		          	scriptClass: "mstrmojo.Button",
												 		          	id: "btnAddFct",
												 		          	cssText: "top:50px;height:40px; text-align:center;vertical-align:center;",
												 		          	iconClass: "mstrmojo-ArchitectListIcon32 leftarrow",
												 		      
												 		          		onclick: function()
												 		          		{
												 		          		var src=mstrmojo.all.lstAtt;
											 		          			var dst=mstrmojo.all.lstFct;
											 		          			var ele =src.items[src.selectedIndex];
												 		          		if (ele)
												 		          			{
												 		          			dst.add([ele]);
												 		          			src.remove([src.selectedIndex]);
												 		          			}
												 		          		}
												 		          	}
									 		            ]         
						 		          	     
		 		          	           },
			 		          	       {
						 		          	scriptClass: "mstrmojo.VBox",     //VboxRight
						 		            cssText: "position:relative;width:300px;left:30px;", 
						 		          	children:[{   
								 		          	  	scriptClass: "mstrmojo.HBox",
									 		          	cssClass: "mstrmojo-Architect-ColumnMapping-Headline",             
									 		         	cssText: "position:relative;width:100%;margin-top:25px;",
									 		         	children:[
									 		         	         	{ 
																	scriptClass : "mstrmojo.Button",
																	iconClass:"mstrmojo-ArchitectListIcon32 t13"
											   				 		},
												 		          	{ 
												 		          	scriptClass: "mstrmojo.Label",					 		  
												 		          	text:"Facts" //string 	
												 		          	} 	 
							 		                    ]         
						 		          	         },
						 		          	         factgrid
						 		          	]          
			 		          	       } 	          	            
		 		          	         ]
		 		          		
		 		           	},	//end of Hbox
		 		         ],
		 		  /**
		 	      * @pre build rendering
		 	      */
 	             preBuildRendering: function preBR(){            
     				this.populateEditor();	
 	             },

	             /**
				  * @populate the editor
				 */
	             populateEditor: function(){
	            	 this.mdl=mstrmojo.all.ArchModel;
	            	 this.tbl=this.mdl.getTable(this.mdl.SelTableID);
	            	 this.populateAttributes();
	            	 this.populateFacts();
	             },
	             /**
				  * @populate the attributes section
				 */
	             populateAttributes: function (){
	            	 var attrs=[];
	            	 var attInfos=[];
	            	 attInfos=this.tbl.AttrInfos;
	            	 for (lIterAtt=0; lIterAtt < attInfos.length;lIterAtt++)	
	            	 {
	            		var attInfo= attInfos[lIterAtt];
	            		var att=this.mdl.getAttribute(attInfo.AttID);
	             		attrs[lIterAtt]=
	            				{
	             				"ITP":"ATT",
	            				"TP":"ATT",
	            				"did": att.AttID,
	            				"dirty":false,
	 	            	        "CN": attInfo.Expr,
	 	            	        "AL": att.AttName,
	 	            	        "DT": attInfo.Format,
	 	            	        "CH": true	
	            				};
	            	 }
	            	mstrmojo.all.lstAtt.set("items", attrs);
	            	mstrmojo.all.lstAtt.set("selectedIndex", 0);
	            	 
	             },
	             /**
				  * @populate the facts section
				 */
	             populateFacts: function (){
	            	 var facts=[];
	            	 var fctInfos=[];
	            	 fctInfos=this.tbl.FctInfos;
	            	 for (lIterFact=0; lIterFact < fctInfos.length;lIterFact++)	
	            	 {
	            		var fctInfo= fctInfos[lIterFact];
	            		var fct=this.mdl.getFact(fctInfo.FctID);
	               		facts[lIterFact]=
	            				{
	               				"ITP":"FCT",
	            				"TP":"FCT",
	            				"did": fct.FctID,
	            				"dirty":false,
	 	            	        "CN": fctInfo.Expr,
	 	            	        "AL": fct.FctName,
	 	            	        "DT": fctInfo.Format,
	 	            	        "CH": true		
	            				};
	            	 }
	            	mstrmojo.all.lstFct.set("items", facts);
	            	mstrmojo.all.lstFct.set("selectedIndex", 0);
	             },
	             /**
				  * @populate the facts section
				 */
	             processChanges: function (){
	            	 var fcts=mstrmojo.all.lstFct.items;
	            	 var atts=mstrmojo.all.lstAtt.items;
	            	 this.mdl.processTableChanges(atts,fcts);
	             },

	             
    			/**
				 * @ignore
				 */
                onmouseover: function(evt) {
    				if(!this.isAndroid) {
    					handleTouchBegin(this, evt.e.pageX, evt.e.pageY);
    				}
                },
                
                touchBegin: function touchBegin(touch) {
	      			var s = this.editorNode.style;
	      			this._tl = parseInt(s.left);
	      			this._tt = parseInt(s.top);
    			},
    			
    			touchSwipeMove: function touchSwipeBegin(touch) {
    				setPosition(this, touch.delta.x + this._tl + "px", touch.delta.y + this._tt + "px");
    			},
    			
    		    onheightChange: function heightchange(evt){
			        if (this.domNode){
		   		       var topSection = 180;
		        	   this.domNode.style.height=this.height;
		        	   if (this.Mappings.children[0].attLst.domNode)
		        	   {
		                   this.Mappings.children[0].attLst.domNode.style.height= (parseInt(this.height)- topSection) + 'px';	  	                           
		        	   }
		        	   if (this.Mappings.children[2].fctLst.domNode)
		        	   {
		                   this.Mappings.children[2].fctLst.domNode.style.height= (parseInt(this.height)- topSection) + 'px';	  	                           
		        	   }   
			        }
                },
                
                onwidthChange: function widthchange(evt){
                  	 if (this.domNode){
                  		   var minWidth = 660 , w = parseInt(this.width), middleWidth = 85;
                  		   if (w < minWidth ){
                  		       w = minWidth;   	      
                  		   }
                  		   var leftWidth = (w - middleWidth )/2;
                  		   var rightWidth = leftWidth;
						   if (this.Mappings.children[0].domNode)
						   {
						       this.Mappings.children[0].domNode.style.width = leftWidth + 'px';	  	                           
						   }
						   if (this.Mappings.children[2].domNode)
						   {
						       this.Mappings.children[2].domNode.style.width = rightWidth + 'px';	  	                           
						   }
                  	 }
                   }, 
    			
    			resize: function resize(evt){
    			    var h=evt.h, w=evt.w;
    			    var offset = 50;
    			    this.set("height", (h - offset) + 'px');
    			    this.set("width", w + 'px');
    			 	
    			}	
    			
   		}
	    
	    );
})();